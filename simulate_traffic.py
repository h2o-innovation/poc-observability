#!/usr/bin/env python3
"""
Script para simular tr√°fego e erros na aplica√ß√£o To-Do
para demonstrar funcionalidades de observabilidade.
"""

import requests
import time
import random
import threading
import json
from datetime import datetime

class TodoTrafficSimulator:
    def __init__(self, base_url="http://localhost:5001"):
        self.base_url = base_url
        self.session = requests.Session()
        self.running = False
        
        # Lista de tarefas de exemplo
        self.sample_tasks = [
            "Implementar dashboard de m√©tricas",
            "Configurar alertas do Prometheus", 
            "Documentar arquitetura da aplica√ß√£o",
            "Revisar logs de erro da aplica√ß√£o",
            "Otimizar consultas no banco de dados",
            "Implementar cache para consultas frequentes",
            "Configurar backup autom√°tico",
            "Atualizar depend√™ncias do projeto",
            "Implementar testes de integra√ß√£o",
            "Configurar CI/CD pipeline",
            "Revisar seguran√ßa da aplica√ß√£o",
            "Implementar rate limiting",
            "Configurar monitoramento de rede",
            "Otimizar imagens Docker",
            "Implementar health checks"
        ]
    
    def check_health(self):
        """Verifica se a aplica√ß√£o est√° rodando"""
        try:
            response = self.session.get(f"{self.base_url}/health", timeout=5)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå Aplica√ß√£o n√£o est√° acess√≠vel: {e}")
            return False
    
    def create_random_task(self):
        """Cria uma tarefa aleat√≥ria"""
        try:
            task_title = random.choice(self.sample_tasks)
            response = self.session.post(
                f"{self.base_url}/api/tasks",
                json={"title": task_title},
                timeout=10
            )
            
            if response.status_code == 201:
                task = response.json()
                print(f"‚úÖ Tarefa criada: {task['id']} - {task_title}")
                return task['id']
            else:
                print(f"‚ùå Erro ao criar tarefa: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o de cria√ß√£o: {e}")
            return None
    
    def list_tasks(self):
        """Lista todas as tarefas"""
        try:
            response = self.session.get(f"{self.base_url}/api/tasks", timeout=10)
            if response.status_code == 200:
                tasks = response.json()
                print(f"üìã Listadas {len(tasks)} tarefas")
                return tasks
            else:
                print(f"‚ùå Erro ao listar tarefas: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o de listagem: {e}")
            return []
    
    def complete_random_task(self, tasks):
        """Completa uma tarefa aleat√≥ria"""
        incomplete_tasks = [t for t in tasks if not t['completed']]
        if not incomplete_tasks:
            return False
            
        try:
            task = random.choice(incomplete_tasks)
            response = self.session.post(
                f"{self.base_url}/api/tasks/{task['id']}/complete",
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"‚úÖ Tarefa completada: {task['id']}")
                return True
            else:
                print(f"‚ùå Erro ao completar tarefa: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o de completar: {e}")
            return False
    
    def delete_random_task(self, tasks):
        """Deleta uma tarefa aleat√≥ria"""
        if not tasks:
            return False
            
        try:
            task = random.choice(tasks)
            response = self.session.delete(
                f"{self.base_url}/api/tasks/{task['id']}",
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"üóëÔ∏è Tarefa deletada: {task['id']}")
                return True
            else:
                print(f"‚ùå Erro ao deletar tarefa: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o de deletar: {e}")
            return False
    
    def simulate_error(self, error_type):
        """Simula um tipo espec√≠fico de erro"""
        try:
            print(f"üî• Simulando erro: {error_type}")
            response = self.session.post(
                f"{self.base_url}/api/simulate-error/{error_type}",
                timeout=15
            )
            
            if response.status_code >= 500:
                print(f"üí• Erro simulado com sucesso: {error_type}")
            else:
                result = response.json()
                print(f"‚ö†Ô∏è Resposta da simula√ß√£o: {result.get('message', 'N/A')}")
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è Timeout simulado com sucesso: {error_type}")
        except Exception as e:
            print(f"üí• Erro capturado durante simula√ß√£o: {e}")
    
    def normal_workflow(self):
        """Simula um fluxo normal de trabalho"""
        print("\nüîÑ Iniciando fluxo normal de trabalho...")
        
        # Listar tarefas existentes
        tasks = self.list_tasks()
        
        # Criar algumas tarefas
        for _ in range(random.randint(1, 3)):
            self.create_random_task()
            time.sleep(random.uniform(0.5, 2))
        
        # Listar novamente
        tasks = self.list_tasks()
        
        # Completar algumas tarefas
        if tasks and random.random() > 0.3:
            self.complete_random_task(tasks)
        
        # Deletar algumas tarefas ocasionalmente
        if tasks and random.random() > 0.7:
            self.delete_random_task(tasks)
    
    def error_simulation_workflow(self):
        """Simula v√°rios tipos de erros"""
        print("\nüí• Iniciando simula√ß√£o de erros...")
        
        error_types = ["db", "timeout", "500", "slow"]
        selected_errors = random.sample(error_types, random.randint(1, 2))
        
        for error_type in selected_errors:
            self.simulate_error(error_type)
            time.sleep(random.uniform(1, 3))
    
    def continuous_traffic(self, duration_minutes=10):
        """Gera tr√°fego cont√≠nuo por um per√≠odo espec√≠fico"""
        print(f"\nüöÄ Iniciando tr√°fego cont√≠nuo por {duration_minutes} minutos...")
        
        if not self.check_health():
            print("‚ùå Aplica√ß√£o n√£o est√° acess√≠vel. Verifique se ela est√° rodando.")
            return
        
        self.running = True
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)
        
        request_count = 0
        error_count = 0
        
        while self.running and time.time() < end_time:
            try:
                # 70% fluxo normal, 30% simula√ß√£o de erros
                if random.random() < 0.7:
                    self.normal_workflow()
                else:
                    self.error_simulation_workflow()
                
                request_count += 1
                
                # Pausa entre opera√ß√µes
                time.sleep(random.uniform(2, 8))
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Interrompido pelo usu√°rio")
                break
            except Exception as e:
                error_count += 1
                print(f"‚ùå Erro durante simula√ß√£o: {e}")
                time.sleep(5)  # Pausa maior em caso de erro
        
        self.running = False
        elapsed = time.time() - start_time
        
        print(f"\nüìä Simula√ß√£o conclu√≠da:")
        print(f"   ‚è±Ô∏è Tempo total: {elapsed:.1f}s")
        print(f"   üìà Requests executados: {request_count}")
        print(f"   ‚ùå Erros encontrados: {error_count}")
    
    def burst_test(self, requests_per_burst=10, bursts=3):
        """Executa um teste de rajada para estressar a aplica√ß√£o"""
        print(f"\n‚ö° Teste de rajada: {requests_per_burst} requests x {bursts} rajadas")
        
        if not self.check_health():
            return
        
        for burst in range(bursts):
            print(f"\nüî• Rajada {burst + 1}/{bursts}")
            
            # Criar threads para requisi√ß√µes simult√¢neas
            threads = []
            for i in range(requests_per_burst):
                if i % 3 == 0:
                    # Erro simulado
                    thread = threading.Thread(
                        target=self.simulate_error, 
                        args=(random.choice(["db", "500", "slow"]),)
                    )
                else:
                    # Opera√ß√£o normal
                    thread = threading.Thread(target=self.create_random_task)
                
                threads.append(thread)
                thread.start()
            
            # Aguardar todas as threads
            for thread in threads:
                thread.join()
            
            if burst < bursts - 1:
                print(f"‚è≥ Aguardando pr√≥xima rajada...")
                time.sleep(5)
        
        print("‚ö° Teste de rajada conclu√≠do!")
    
    def stop(self):
        """Para a simula√ß√£o"""
        self.running = False

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Simulador de tr√°fego para To-Do App")
    parser.add_argument("--url", default="http://localhost:5001", help="URL base da aplica√ß√£o")
    parser.add_argument("--mode", choices=["normal", "continuous", "burst", "errors"], 
                       default="normal", help="Modo de opera√ß√£o")
    parser.add_argument("--duration", type=int, default=10, 
                       help="Dura√ß√£o em minutos (para modo continuous)")
    parser.add_argument("--bursts", type=int, default=3, 
                       help="N√∫mero de rajadas (para modo burst)")
    parser.add_argument("--requests", type=int, default=10, 
                       help="Requests por rajada (para modo burst)")
    
    args = parser.parse_args()
    
    simulator = TodoTrafficSimulator(args.url)
    
    print(f"üéØ Simulador de Tr√°fego - To-Do App")
    print(f"üì° URL: {args.url}")
    print(f"üéÆ Modo: {args.mode}")
    print(f"üïê Timestamp: {datetime.now().isoformat()}")
    print("=" * 50)
    
    try:
        if args.mode == "normal":
            simulator.normal_workflow()
            
        elif args.mode == "continuous":
            simulator.continuous_traffic(args.duration)
            
        elif args.mode == "burst":
            simulator.burst_test(args.requests, args.bursts)
            
        elif args.mode == "errors":
            simulator.error_simulation_workflow()
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Simula√ß√£o interrompida pelo usu√°rio")
        simulator.stop()
    
    print("\n‚úÖ Simula√ß√£o finalizada!")

if __name__ == "__main__":
    main()
