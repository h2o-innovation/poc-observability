version: '3'
services:
  alloy:
    image: grafana/alloy:latest
    ports:
      - 12345:12345
      - 4318:4318
      - 4317:4317
      - 4041:4041
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - loki
    networks:
      - adventure
  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml --web.enable-otlp-receiver --web.enable-remote-write-receiver --enable-feature=exemplar-storage
    networks:
      - adventure
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - adventure
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
    ports:
      - 3000:3000/tcp
    volumes:
      - ./grafana:/etc/grafana/provisioning
    networks:
      - adventure

# Tempo
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:2.7.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo

  memcached:
    image: memcached:1.6.29
    container_name: memcached
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"   # tempo
    depends_on:
      - init
      - memcached
    networks:
      - adventure

  pyroscope:
    image: grafana/pyroscope:latest
    ports:
      - "4040:4040"
    command:
      - "server"
    environment:
      - PYROSCOPE_LOG_LEVEL=debug
    networks:
      - adventure

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: todoapp
      POSTGRES_USER: todouser
      POSTGRES_PASSWORD: todopass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - adventure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todouser -d todoapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # To-Do App
  todo-app:
    build: .
    ports:
      - "5001:5000"
    environment:
      - SETUP=docker
      - DB_HOST=postgres
      - DB_NAME=todoapp
      - DB_USER=todouser
      - DB_PASSWORD=todopass
      - DB_PORT=5432
      - FLASK_DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      alloy:
        condition: service_started
    networks:
      - adventure
    volumes:
      - .:/app
    working_dir: /app
    command: python todo_app.py

networks:
    adventure:

volumes:
  postgres_data:
    


    
